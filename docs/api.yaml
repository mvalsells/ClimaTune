openapi: 3.0.3
info:
  title: ClimeTune API
  version: '1.0'
  x-logo:
    url: ''
  contact:
    name: ClimaTune - GitHub
    url: https://github.com/mvalsells/ClimaTune
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
paths:
  /place/:
    post:
      summary: Adds a new place
      tags:
        - place
      description: Adds a new place to the database
      operationId: addPlace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Place'
        required: true
      responses:
        '200':
          description: Place added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: string
                example: Invalid input
        '409':
          description: Place with the given id already exists
          content:
            application/json:
              schema:
                type: string
                example: Place with the given id already exists
        '412':
          description: Place with out of range coordinates or place with same coordinates exists
          content:
            application/json:
              schema:
                type: string
                example: Place with coordinates out of range or place with same coordinates exists
    get:
      summary: Returns all places
      tags:
        - place
      description: Get a list of all places in the database
      operationId: getPlaces
      responses:
        '200':
          description: List of all places
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Place'

  /place/{id}:
    get:
      summary: Returns a place
      tags:
        - place
      description: Returns the place with the given id
      operationId: getPlace
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The id of the place to return
      responses:
        '200':
          description: Place added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
        '404':
          description: Place does not exist
          content:
            application/json:
              schema:
                type: string
                example: Place does not exist
    put:
      summary: Updates an existing place
      tags:
        - place
      description: 'Updates the place of the given id with the given place scheme'
      operationId: updatePlace
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The id of the place to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Place'
        required: true
      responses:
        '200':
          description: Place updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: string
                example: Invalid input
        '404':
          description: Place does not exist
          content:
            application/json:
              schema:
                type: string
                example: Place does not exist
    delete:
      summary: Deletes an existing place
      tags:
        - place
      description: 'Deletes the place of the given id'
      operationId: deletePlace
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The id of the place to delete
      responses:
        '200':
          description: Place removed
          content:
            application/json:
              schema:
                type: string
                example: Place removed
        '404': 
          description: Place does not exist
          content:
            application/json:
              schema:
                type: string
                example: Place does not exist
        '412':
          description: Place has rain data
          content:
            application/json:
              schema:
                type: string
                example: Place has rain data and can not be removed
  
  /rain/:
    post:
      summary: Adds a new rain record
      tags:
        - rain
      description: Adds a new rain record to the database
      operationId: addRain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rain'
        required: true
      responses:
        '200':
          description: Rain record added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rain'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: string
                example: Invalid input
        '409':
          description: Rain record already exists
          content:
            application/json:
              schema:
                type: string
                example: Rain record already exists
    get:
      summary: Returns all rain records
      tags:
        - rain
      description: Get a list of all rain records in the database
      operationId: getAllRain
      responses:
        '200':
          description: List of all rain records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rain'

  /rain/{id}:
    get:
      summary: Returns a rain record
      tags:
        - rain
      description: Returns the rain record with the given id
      operationId: getRain
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The id of the rain record to return
      responses:
        '200':
          description: Rain record fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rain'
        '404':
          description: Rain record with given id does not exist
          content:
            application/json:
              schema:
                type: string
                example: Rain record does not exist
    put:
      summary: Updates an existing rain record
      tags:
        - rain
      description: 'Updates the rain record with the given rain scheme'
      operationId: updateRain
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The id of the rain record to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rain'
        required: true
      responses:
        '200':
          description: Rain updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rain'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: string
                example: Invalid input
        '404':
          description: Rain record with given id does not exist
          content:
            application/json:
              schema:
                type: string
                example: Rain record does not exist
    delete:
      summary: Deletes an existing rain record
      tags:
        - rain
      description: 'Deletes the rain record with the given id'
      operationId: deleteRain
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The id of the rain record to delete
      responses:
        '200':
          description: Rain record removed
          content:
            application/json:
              schema:
                type: string
                example: Rain record removed
        '404': 
          description: Rain record does not exist
          content:
            application/json:
              schema:
                type: string
                example: Rain record does not exist
components:
  securitySchemes: {}
  schemas:
    Place:
      type: object
      required:
        - name
        - latitude
        - longitude
      properties:
        id:
          type: integer
          format: int32
          minimum: 1
          maximum: 2147483647
        name:
          type: string
          maxLength: 40
        address:
          type: string
          maxLength: 100
        postalCode:
          type: string
          maxLength: 10
        city:
          type: string
          maxLength: 100
        countryCode:
          type: string
          maxLength: 2
        latitude:
          type: number
          format: float
          minimum: -90
          maximum: 90
        longitude:
          type: number
          format: float
          minimum: -180
          maximum: 180
    Rain:
      type: object
      required: 
        - date
        - litersMsq
        - id_place
      properties:
        id:
          type: integer
          format: int32
          minimum: 1
          maximum: 2147483647
        date:
          type: string
          format: date
        litersMsq:
          type: number
          format: float
          minimum: 0
          maximum: 10000
        observations:
          type: string
          maxLength: 750
        id_place:
          type: integer
          format: int32
          minimum: 1
          maximum: 2147483647
  headers: {}
  responses: {}
  parameters: {}
tags:
- name: place
  description: 'Group all place related endpoints'
- name: rain
  description: 'Group all rain related endpoints'
servers:
  - url: https://api.climatune.valsells.me
    description: ''
    variables: {}
security: []